@using Mausam.Models

<div class="relative mb-6">
    <div class="flex gap-2">
        <div class="relative flex-1">
            <input class="w-full rounded-lg border border-slate-300 bg-white/90 backdrop-blur px-4 py-3 pr-12 text-slate-800 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-base" 
                   type="text" 
                   @bind="SearchQuery" 
                   @oninput="HandleSearchInput"
                   @onkeydown="HandleKeyDown"
                   @onblur="HandleBlur"
                   placeholder="Search city or place..." />
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-4 text-slate-400">
                <i class="fas fa-magnifying-glass text-lg"></i>
            </div>
            @if (ShowSuggestions && Suggestions.Any())
            {
                <div class="absolute z-50 mt-2 w-full max-h-80 overflow-auto rounded-xl border border-slate-200 bg-white/95 backdrop-blur shadow-xl">
                    @for (int i = 0; i < Suggestions.Count; i++)
                    {
                        var suggestion = Suggestions[i];
                        var isSelected = i == SelectedIndex;
                        <button class="w-full text-left px-4 py-3 hover:bg-slate-50 focus:bg-slate-50 focus:outline-none transition-colors duration-150 @(isSelected ? "bg-blue-50 border-l-4 border-blue-500" : "")" 
                                @onclick="() => SelectSuggestion(suggestion)"
                                @onmouseover="() => SelectedIndex = i">
                            <div class="flex items-center gap-3">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-map-marker-alt text-slate-400 text-sm"></i>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div class="text-slate-800 font-medium truncate">
                                        @GetShortDisplayName(suggestion.DisplayName)
                                    </div>
                                    @if (HasLocationDetails(suggestion.DisplayName))
                                    {
                                        <div class="text-slate-500 text-sm truncate">
                                            @GetLocationDetails(suggestion.DisplayName)
                                        </div>
                                    }
                                </div>
                            </div>
                        </button>
                        @if (i < Suggestions.Count - 1)
                        {
                            <div class="border-b border-slate-100 mx-4"></div>
                        }
                    }
                </div>
            }
        </div>
        <button class="inline-flex items-center gap-2 px-6 py-3 rounded-lg border border-slate-300 bg-white/90 hover:bg-slate-50 text-slate-700 font-medium transition-all duration-200 hover:shadow-md" @onclick="SearchByCity">
            <i class="fas fa-search"></i>
            <span class="hidden sm:inline">Search</span>
        </button>
    </div>
</div>

@code {
    [Parameter] public string SearchQuery { get; set; } = string.Empty;
    [Parameter] public bool ShowSuggestions { get; set; }
    [Parameter] public List<LocationSuggestion> Suggestions { get; set; } = new();
    [Parameter] public EventCallback<string> OnSearchQueryChanged { get; set; }
    [Parameter] public EventCallback<LocationSuggestion> OnSuggestionSelected { get; set; }
    [Parameter] public EventCallback OnSearchClicked { get; set; }

    private int SelectedIndex = -1;

    private async void HandleSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        SelectedIndex = -1; // Reset selection when typing
        await OnSearchQueryChanged.InvokeAsync(SearchQuery);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!ShowSuggestions || !Suggestions.Any()) return;

        switch (e.Key)
        {
            case "ArrowDown":
                SelectedIndex = Math.Min(SelectedIndex + 1, Suggestions.Count - 1);
                break;
            case "ArrowUp":
                SelectedIndex = Math.Max(SelectedIndex - 1, -1);
                break;
            case "Enter":
                if (SelectedIndex >= 0 && SelectedIndex < Suggestions.Count)
                {
                    await SelectSuggestion(Suggestions[SelectedIndex]);
                }
                else
                {
                    await SearchByCity();
                }
                break;
            case "Escape":
                ShowSuggestions = false;
                SelectedIndex = -1;
                break;
        }
    }

    private async Task HandleBlur()
    {
        // Delay hiding suggestions to allow for clicks
        await Task.Delay(150);
        ShowSuggestions = false;
        SelectedIndex = -1;
    }

    private async Task SelectSuggestion(LocationSuggestion suggestion)
    {
        SearchQuery = suggestion.DisplayName;
        ShowSuggestions = false;
        SelectedIndex = -1;
        await OnSuggestionSelected.InvokeAsync(suggestion);
    }

    private async Task SearchByCity()
    {
        ShowSuggestions = false;
        SelectedIndex = -1;
        await OnSearchClicked.InvokeAsync();
    }

    private string GetShortDisplayName(string displayName)
    {
        if (string.IsNullOrEmpty(displayName)) return string.Empty;
        
        var parts = displayName.Split(',');
        if (parts.Length >= 2)
        {
            return $"{parts[0].Trim()}, {parts[1].Trim()}";
        }
        return displayName;
    }

    private bool HasLocationDetails(string displayName)
    {
        if (string.IsNullOrEmpty(displayName)) return false;
        var parts = displayName.Split(',');
        return parts.Length > 2;
    }

    private string GetLocationDetails(string displayName)
    {
        if (string.IsNullOrEmpty(displayName)) return string.Empty;
        
        var parts = displayName.Split(',');
        if (parts.Length > 2)
        {
            return string.Join(", ", parts.Skip(2).Take(2).Select(p => p.Trim()));
        }
        return string.Empty;
    }
}
